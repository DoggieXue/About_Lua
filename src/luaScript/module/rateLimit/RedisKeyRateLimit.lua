---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xx.
--- DateTime: 2022/2/21 下午8:27
---
local basic = require("luaScript.module.common.basic");
local redisOp = require("luaScript.redis.RedisOperator");

local _Module = {}
_Module.__index = _Module;

-- 创建一个新的实例
function _Module.new(self, key)
    local object = {red = nil};
    setmetatable(object, self);

    --创建自定义的Redis操作对象
    local red = redisOp:new();
    basic.log("参数key = "..key);
    red:open();
    object.red = red;
    --object.key = "count_rate_limit:" .. key;
    object.key = key;
    return object;
end

-- 判断是否能通过流量控制
-- true:未被限流；false:被限流
function _Module.acquire(self)
    local redis = self.red;
    basic.log("当前key = "..self.key)
    local current = redis:getValue(self.key);

    basic.log("value type is "..type(current));
    basic.log("当前计数器值 value = "..tostring(current));
    --判断是否大于限制次数
    local limited = current and current ~= ngx.null and tonumber(current) > 10;

    -- 被限流
    if limited then
        basic.log("限流成功，已经超过10次了，本次是第"..current.."次");
        redis:incrValue(self.key);
        return false;
    end

    if not current or current == ngx.null then
        redis:setValue(self.key, 1);
        redis:expire(self.key, 10);
    else
        redis:incrValue(self.key);
    end
    return true
end

-- 取得访问次数
function _Module.getCount(self)
    local current = self.red:getValue(self.key);
    if current and current ~= ngx.null then
        return tonumber(current);
    end
    return 0;
end

-- 归还Redis
function _Module.close(self)
    self.red:close();
end

return _Module;