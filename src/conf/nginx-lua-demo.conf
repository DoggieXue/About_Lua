#user nobody
worker_processes	1;

#开发环境
error_log	logs/error.log debug;
#生产环境
#error_log	logs/error.log;

pid	logs/nginx.pid;

events {
	worker_connections	1024;
}

http {
	default_type 'text/html';
	charset utf-8;

	log_format	main	'$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  	access_log	logs/access.log	main;
  	
  	sendfile	on;
  	
  	keepalive_timeout	65;
  	
  	#gzip	on;
  	
  	#指定缓存信息
  	
  	#保证只有一个线程去访问Redis或是MySQL-lock for cache
  	
  	#lua扩展加载
  	lua_package_path	"./?.lua;/usr/local/openresty/conf/?/?.lua;/usr/local/openresty/conf/?.lua;/Users/xuexiao/Software/openresty/work/conf/?/?.lua;/Users/xuexiao/Software/openresty/work/conf/?.lua;;";
  	lua_package_cpath	"/usr/local/openresty/lualib/?/?.so;/usr/local/openresty/lualib/?.so;;";
  	
  	
  	#项目初始化
  	init_by_lua_file	luaScript/initial/loading_config.lua;
  	
  	#调试模式，关闭lua脚本缓存
  	lua_code_cache on;
  	
  	server {
  		listen		 	80 default;
  		server_name	 	localhost;
  		default_type	'text/html';
  		charset		 utf-8;
  		
  		location / {
  			echo "默认根路径： /";
  		}
  		
  		#测试lua是否可以执行
  		location /lua {
  			content_by_lua 'ngx.say("Hello Lua!")';
  		}
  		
  		location /test {
  			content_by_lua_file	luaScript/test.lua;
  		}
  		
  		#第一个lua脚本 helloworld
  		location /helloworld {
  			default_type	'text/html';
  			charset utf-8;
  			content_by_lua_file	luaScript/module/demo/helloworld.lua;
  		}
  		
  		#数据类型 面向对象基础
  		location /demo {
  			default_type	'text/html';
  			charset	utf-8;
  			content_by_lua_file	luaScript/module/demo/showBasicDemo.lua;
  		}
  		
#  			if ngx.var.remote_addr == "192.168.56.121" then

  		location /access_demo {
  			access_by_lua	'ngx.log(ngx.DEBUG, "remote_addr = "..ngx.var.remote_addr);
  			if ngx.var.remote_addr == "127.0.0.1" then

  				return;
  			end
  			ngx.exit(ngx.HTTP_UNAUTHORIZED);
  			';
  			echo "hello world";
  		}
  		
#  			allow "192.168.56.121";

  		location /access_demo_2 {
  			allow "127.0.0.1";
  			deny all;
  			echo "hello world";
  		}
  		
  		location /errorLog {
  			content_by_lua '
  				ngx.log(ngx.ERR, "this is an error log ");
  				ngx.say("错误日志调用成功");
  			';
  		}
  		
  		location /infoLog {
  			content_by_lua '
  				ngx.log(ngx.ERR, "this is an info log ");
  				ngx.say("业务日志调用成功");
  			';
  		}
  		
  		location /debugLog {
  			content_by_lua '
  				ngx.log(ngx.ERR, "this is an debug log ");
  				ngx.say("调试日志调用成功");
  			';
  		}
  		
  		location /set_by_lua_demo {
  			#set 指令定义两个Nginx变量
  			set $foo 1;
  			set $bar 2;
  			
  			#
  			set_by_lua $sum 'return tonumber(ngx.arg[1]) + tonumber(ngx.arg[2])' $foo $bar;
  			
  			echo "$foo + $bar = $sum";
  		}
  		
  		
  		#ngx.req.get_uri_args()方法Lua脚本获取URL中的参数
  		location /add_params_demo {
  			set_by_lua	$sum	'
  			local args = ngx.req.get_uri_args();
  			local a = args["a"];
  			local b = args["b"];
  			return a + b;
  			';

  			echo "$arg_a + $arg_b = $sum";
  		}

  		#ngx.arg获取请求参数值
  		location /add_params_demo_2 {
  			set_by_lua	$sum	'
  				local a = tonumber(ngx.arg[1]);
  				local b = tonumber(ngx.arg[2]);
  				return a + b;
  			'	$arg_a $arg_b;

  			echo "$arg_a + $arg_b = $sum";
  		}


  		#模拟上游服务
  		location /header_demo {
  			content_by_lua_block {
  				ngx.header["header1"] = "value1";
  				ngx.header.header2 = 2;
  				ngx.header.set_cookie = {'Foo=bar; test=ok; path=/','age=18; path=/'};
  				ngx.say("演示程序： ngx.header的使用");
  			}
  		}

  		#模拟网关反向代理
  		location /header_filter_demo {

  			proxy_pass http://127.0.0.1/header_demo;

  			header_filter_by_lua_block {
  				local cookies = ngx.header.set_cookie;
  				if cookies then
  					if type(cookies) == "table" then
  						local cookie = {}
  						for k, v in pairs(cookies) do
  							cookie[k]= v..";Secure;httponly"
  						end
  						ngx.header.set_cookie = cookie
  					else
  						ngx.header.set_cookie = cookies..";Secure;httponly"
  					end
  				end
  			}

  		}

  		#Lua访问Nginx变量演示
  		location /lua_var_demo {
  			#自定义Nginx变量，名为hello，值为world
  			set $hello world;

  			content_by_lua_block {
  				local basic = require("luaScript.module.common.basic");
  				--定义一个Lua table，暂存需要输出的Nginx内置变量
  				local vars = {};
  				vars.remote_addr = ngx.var.remote_addr;
  				vars.request_uri = ngx.var.request_uri;
  				vars.query_string = ngx.var.query_string;
  				vars.uri = ngx.var.uri;

  				vars.nginx_version = ngx.var.nginx_version;
  				vars.server_protocol = ngx.var.server_protocol;
  				vars.request_method = ngx.var.request_method;
  				vars.request_filename = ngx.var.request_filename;
  				vars.document_root = ngx.var.document_root;
  				vars.body_bytes_sent = ngx.var.body_bytes_sent;
  				vars.binary_remote_addr = ngx.var.binary_remote_addr;
  				vars.args = ngx.var.args;

  				--通过内置变量访问请求参数
  				vars.foo = ngx.var.arg_foo;
  				ngx.say("演示程序： 将内置变量返回给客户端<br>");
  				--使用自定义函数将Lua table转换成字符串，然后输出
  				local str = basic.tableToStr(vars, ",<br>");
  				ngx.say(str);

  				ngx.say("<br>演示程序： 将普通变量返回给客户端<br>");
  				--访问自定义Nginx变量hello
  				local hello = ngx.var.hello;
  				ngx.say("hello = "..hello);
  			}
  		}

  		#Lua访问请求上下文变量
  		location /ctx_demo {
  			rewrite_by_lua_block {
  				--在上下文设置属性var1
  				ngx.ctx.var1 = 1;
  			}

  			access_by_lua_block {
  				--在上下文设置属性var2
  				ngx.ctx.var2 = 10;
  			}

  			content_by_lua_block {
  				local basic = require("luaScript.module.common.basic");
  				--在上下文设置属性var3
  				ngx.ctx.var3 = 100;

  				--3个上下文求和
  				local result = ngx.ctx.var1 + ngx.ctx.var2 + ngx.ctx.var3;
  				ngx.say(result);

  				ngx.ctx.sum = result;

  				--使用自定义函数将Lua table转换成字符串
  				local str = basic.tableToStr(ngx.ctx, ",<br>");
  				ngx.say("<br>");
  				ngx.say(str);

  			}
  		}

  		#ngx.location.capture示例

  		#向外公开的请求
  		location ~ /goods/detail/([0-9]+) {
  			set $goodsId $1;	#将location的正则捕获组1，赋值到变量 $goodsId
  			set $var1 '';
  			set $var2 '';
  			set $father_method '';

  			content_by_lua_block {

  				-- 解析body参数之前一定要先获取request body
  				ngx.req.read_body();

  				-- 组装内部请求uri
  				local uri = "/internal/detail/"..ngx.var.goodsId;

  				local request_method = ngx.var.request_method;
  				ngx.say("父请求方法是： ", request_method.."<br>");
  				ngx.say("request_method类型： ", type(request_method).."<br>");

  				-- 获取父请求的参数:假设父请求是GET请求
  				local args = ngx.req.get_uri_args();

  				--local vars = {var1 = "value1", var2 = "value2", father_method = request_method};

  				-- 定义主子请求共享变量
  				local shareCtx = {c1 = "v1", other = "other value"};

  				-- 发送单个子请求
  				local res = ngx.location.capture(uri, {
  					method = ngx.HTTP_GET,
  					args = args,	--将父请求的参数转发给子请求
  					body = 'customed request body',
  					vars = {var1 = "value1", var2 = "value2", father_method = request_method}, --传递的变量
  					always_forward_body = true, --转发父请求的request body
  					ctx = shareCtx, --共享给子请求的上下文table
  				});

  				ngx.say(" child res.status: ", res.status);
  				ngx.say(res.body);
  				ngx.say("<br>shareCtx.c1 = ", shareCtx.c1);
  			}
  		}

  		#内部接口请求
  		location ~ /internal/detail/([0-9]+) {
  			internal; #此指令限制外部客户端是不能直接访问内部接口
  			set $goodsId $1; #将捕获组1的值，放置到Nginx自定义变量 goodsId中

  			content_by_lua_block {
  				local basic = require("luaScript.module.common.basic");
  				ngx.req.read_body();

  				ngx.say("<br><hr>child start: ");

  				--访问父请求传递的参数
  				local args = ngx.req.get_uri_args();

  				ngx.say("<br> 父请求传递的请求参数：foo = ", args.foo);

  				--访问父请求传递的请求体
  				local data = ngx.req.get_body_data();
  				ngx.say(", <br> 父请求传递的请求体：data = ", data);

  				--访问自定义的Nginx变量
  				ngx.say(", <br> 获取Nginx自定义变量：goodsId = ", ngx.var.goodsId);

  				--访问父请求传递的变量
  				ngx.say(", <br> 父请求传递的变量：var.var1 = ", ngx.var.var1);
    			ngx.say(", <br> 父请求传递的变量：var.father_request = ", ngx.var.father_method);

  				--访问父请求传递的共享上下文，并修改其属性
  				ngx.say(", <br> ngx.ctx.c1 = ", ngx.ctx.c1);
  				ngx.say("<br>child end<hr>");
  				ngx.ctx.c1 = "changed value by child";
  			}
  		}


  		#发起两个子请求：一个get请求，一个post请求
  		location /capture_multi_demo {
  			content_by_lua_block {
  				local postBody = ngx.encode_args({post_k1 = 32, post_k2 = "post_v2"});
  				local reqs = {};

  				table.insert(reqs, {"/print_get_param", {args = "a=3&b=4"}});
  				table.insert(reqs, {"/print_post_param", {method = ngx.HTTP_POST, body = postBody}});

  				-- 统一发请求，等待结果
  				local resps = {ngx.location.capture_multi(reqs)};

  				-- 迭代结果列表
  				for i, res in ipairs(resps) do
  					ngx.say(" child res.status: ", res.status, "<br>");
  					ngx.say(" child res.body: ", res.body, "<br>");
  				end
  			}
  		}

  		#模拟上游接口1：输出get请求参数
  		location /print_get_param {
  			internal;
  			content_by_lua_block {
  				ngx.say("<br><hr>child start: ");
  				local arg = ngx.req.get_uri_args();
  				for k, v in pairs(arg) do
  					ngx.say("<br>[GET] key: ", k, " value: ", v);
  				end
  				ngx.say("<br>child end <hr>");
  			}
  		}
  		#模拟上游接口2：输出post请求参数
  		location /print_post_param {
  			internal;
  			content_by_lua_block {
  				ngx.say("<br><hr> child start: ");
  				ngx.req.read_body(); --解析body之前一定要先读取body
  				local arg = ngx.req.get_post_args();
  				for k, v in pairs(arg) do
  					ngx.say("<br>[POST] key: ", k, " value: ", v);
  				end
  				ngx.say("<br>child end <hr>");
  			}
  		}


  		#使用ngx.exec进行内部重定向
  		location /internal/sum {
  			#internal;
  			content_by_lua_block {
  				local arg_a = tonumber(ngx.var.arg_a);
  				local arg_b = tonumber(ngx.var.arg_b);
  				local arg_c = tonumber(ngx.var.arg_c);

  				local sum = arg_a + arg_b + arg_c;

  				ngx.say(arg_a, "+", arg_b, "+", arg_c, "=", sum);
  			}
  		}

  		location /sum {
  			content_by_lua_block {

  				-- 内部重定向到/internal/sum
  				return ngx.exec("/internal/sum", {a = 100, b = 10, c = 1});
  			}
  		}

  		#使用ngx.rewrite进行外部重定向
  		location /sum2 {
  			content_by_lua_block {
  				-- 外部重定向，默认302重定向
  				return ngx.redirect("/internal/sum?a=100&b=10&c=1");
  			}
  		}

  		location /sum3 {
  			rewrite ^/sum3 "/internal/sum?a=100&b=10&c=1" redirect;
  		}

  		location /sum4 {
  			content_by_lua_block {
  				--外部重定向，显示指定301永久重定向
  				return ngx.redirect("/internal/sum?a=100&b=10&c=1", ngx.HTTP_MOVED_PERMANENTLY);
  			}
  		}

  		location /sum5 {
  			rewrite ^/sum5 "/internal/sum?a=100&b=10&c=1" permanent;
  		}


  		#目标URL：https://www.zhihu.com/question/268589944/answer/1914827166

  		# 使用 location 指令后面的正则表达式进行URL后缀捕获
  		#http://localhost/redirectTest/question/268589944/answer/1914827166
    	location ~* /redirectTest/(.*) {
      		content_by_lua_block {
        		-- 使用 ngx.redirect 方法进行外部重定向
        		-- 博客参数为 正则捕获组1
       		return ngx.redirect("https://www.zhihu.com/"..ngx.var[1]);
      		}
    	}

    	#http://localhost/redirectTest1/question/268589944/answer/1914827166
    	location ~* /redirectTest1/* {
      		# 使用 rewrite 指令后面的正则表达式进行URL后缀捕获
      		rewrite  ^/redirectTest1/(.*) $1 break;
      		content_by_lua_block {
        		-- 使用 ngx.redirect 方法进行外部重定向
        		-- 博客参数为 正则捕获组1
        		return ngx.redirect("https://www.zhihu.com/"..ngx.var[1]);
      		}
    	}

		#http://localhost/redirectTest2/question/268589944/answer/1914827166
    	location ~* /redirectTest2/* {
      		# 使用 rewrite 指令进行外部重定向
      		rewrite  ^/redirectTest2/(.*)  https://www.zhihu.com/$1  redirect;
    	}
  	}
}