
#user  nobody;
worker_processes  1;

#生产环境
#error_log  logs/error.log;
#测试环境
#error_log  logs/error.log  info;
#开发环境
error_log  logs/error.log  debug;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    #include       mime.types;
    default_type  text/html;
    charset utf-8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #指定缓存信息
    lua_shared_dict ngx_cache 128m;
    #保证只有一个线程去访问redis或是mysql-lock for cache
    lua_shared_dict cache_lock 100k;

    #定义存储IP黑名单的共享内存变量
    lua_shared_dict black_ip_list 1m;

    #lua扩展加载
    lua_package_path    "./?.lua;/usr/local/openresty/conf/?/?.lua;/usr/local/openresty/conf/?.lua;/Users/xuexiao/Software/openresty/work/conf/?/?.lua;/Users/xuexiao/Software/openresty/work/conf/?.lua;;";
    lua_package_cpath   "/usr/local/openresty/lualib/?/?.so;/usr/local/openresty/lualib/?.so;;";

    #项目初始化
    init_by_lua_file    luaScript/initial/loading_config.lua;

    #调试模式：关闭lua脚本缓存
    lua_code_cache  off;

    server {
        listen       80 default;
        server_name  localhost;
        default_type text/html;
        charset      utf-8;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            echo "默认根路径匹配： /";
        }

        #测试lua是否可运行
        location /lua {
            content_by_lua 'ngx.say("Hello Lua!")';
        }

        #redis CRUD简单操作示例
        location /redis_demo {
            content_by_lua_file luaScript/redis/RedisDemo.lua;
        }

        #Redis连接池操作Demo
        location /pool_demo {
            content_by_lua_block {
                local redis = require "resty.redis"
                local config = require("luaScript.module.config.redis-config");
                -- 连接池大小
                local pool_size = config.pool_size;
                -- 最大的空闲时间，单位：毫秒
                local pool_max_idle_time = config.pool_max_idle_time;

                local red = redis:new();
                local ok, err = red:connect(config.host_name, config.port);
                if not ok then
                    ngx.say("failed to connect: ", err);
                    return;
                else
                    ngx.say("succeed to connect redis", "<br>");
                end
                -- red:auth(config.password);
                -- 注意1：不能在此处进行连接回收，只有数据传输完毕、Redis连接使用完成之后，才能调用set_keepalive方法将连接放到池子里
                -- set_keepalive方法会立即将red连接对象转换到closed状态，会导致后面的Redis调用出错
                --向Redis存入值
                ok, err = red:set("hello", "world");

                if not ok then
                    -- 注意2：此处不能回收连接，否则可能把可用性存疑的连接放到池子里
                    return;
                end

                -- 正确回收连接
                red:set_keepalive(pool_max_idle_time, pool_size);
                ngx.say("succeed to collect redis connection", "<br>");
            }
        }

        # Nginx+Redis实现分布式接口访问统计
        location /visitCount {
            #定义一个变量，接收Lua脚本返回的访问次数
            set $count 0;

            access_by_lua_file luaScript/redis/RedisVisitCount.lua;
            echo "10s内总访问次数为： " $count;
        }

        # Nginx+Redis+Java架构案例
        location = /goods/detail {
            content_by_lua_block {
                local goodsId = ngx.var.arg_goodsId;

                if not goodsId then
                    ngx.say("请输入goodsId");
                    return;
                end

                local RedisCacheOpe = require("luaScript.redis.RedisCacheOpe");
                local redisCache = RedisCacheOpe:new();
                local json = redisCache:getCache(goodsId);

                -- 判断缓存是否被命中
                if not json then
                    ngx.say("未命中缓存，回源到上游接口", "<br>");
                    json = redisCache.goUpstream();
                else
                    ngx.say("缓存已被命中！", "<br>");
                end
                ngx.say("商品信息：", json);
            }
        }

        location = /java/goods/detail {
            internal;
            content_by_lua_block {
                local RedisCacheOpe = require "luaScript.redis.RedisCacheOpe";

                -- 模拟Java后台从DB中查询的数据
                local json = "{goodsId:商品ID, goodsName:商品名称}";

                -- 将商品信息缓存到Redis
                local redisCache = RedisCacheOpe:new();
                redisCache:setCache(ngx.var.arg_goodsId, json);

                -- 返回商品到下游网关
                ngx.say(json);
            }
        }

        #Nginx+Redis实现IP黑名单拦截示例
        location /black_ip_demo {
            access_by_lua_file luaScript/redis/black_ip_filter.lua;
            echo "恭喜您，没有被拦截!";
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
